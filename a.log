const { ethers, network } = require("hardhat");


const ERC20_ABI = require("./erc20_abi.json");
const MARKET_ABI = require("./market_abi.json");
const CONTROL_ABI = require("./cotrol_abi.json");
const ORACLE_ABI = require("./oracle_abi.json");

const WETH_TOKEN_ADDRESS = "0x639A647fbe20b6c8ac19E48E2de44ea792c62c5C";
const USDC_TOKEN_ADDRESS = "0x8965349fb649A33a30cbFDa057D8eC2C48AbE2A2";
const WBTC_TOKEN_ADDRESS = "0x6aB6d61428fde76768D7b45D8BFeec19c6eF91A8";

const ORACLE_ADDRESS = "0x4EEf796B3FA549949D0397C5f323964930Ee20ED";

const A = "0x89bB17aF665Ec0607268C697Bb294117992027Cf";
const mockAddress = "0xF2c1f6f560D42e917c25837444168808C2B424d4";
const B = "0x3632E78219227b172F0aaF56F92FB08D87C94379";
let borrower;
let COMP,WETH,WBTC;
let WBTC_M,WETH_M;

describe("Fork", function () {
    this.timeout(6000000);
    it("Testing fork data", async function () {
        let provider = ethers.provider;

        await network.provider.request({
            method: "hardhat_impersonateAccount",
            params: [mockAddress],
        });

        borrower = await ethers.getSigner(mockAddress);

        WBTC = new ethers.Contract(USDC_TOKEN_ADDRESS, ERC20_ABI,borrower);
        let h = await WBTC.balanceOf(mockAddress);
        console.log(h);
        AM  = new ethers.Contract(A, MARKET_ABI, borrower);
        let ad = await AM.comptroller();
        console.log(ad);
         A_CONTROL = await new ethers.Contract(B, CONTROL_ABI,borrower);
        let d = await A_CONTROL.getAllMarkets();
        console.log(d);
        O = new ethers.Contract(ORACLE_ADDRESS,ORACLE_ABI,borrower);
        for(let i = 0;i<10;i++){
           let pp =await  O.getUnderlyingPrice(d[i]);
           console.log(pp);

        }

/*        WETH = new ethers.Contract(WETH_TOKEN_ADDRESS, ERC20_ABI, borrower);
        WBTC = new ethers.Contract(WBTC_TOKEN_ADDRESS, ERC20_ABI,borrower);
        WETH_M = new ethers.Contract(WETH_MARKET_ADDRESS, MARKET_ABI, borrower);
        WBTC_M = new ethers.Contract(WBTC_MARKET_ADDRESS, MARKET_ABI,borrower);
        A_WETH_M = new ethers.Contract(APELL_WETH_MARKET_ADDRESS, MARKET_ABI, borrower);
        A_WBTC_M = new ethers.Contract(APELL_WBTC_MARKET_ADDRESS, MARKET_ABI,borrower);
        CONTROL = new ethers.Contract(CONTROL_ADDRESS, CONTROL_ABI,borrower);
        A_CONTROL = new ethers.Contract(A_CONTROL_ADDRESS, CONTROL_ABI,borrower);


        await A_CONTROL.connect(borrower).enterMarkets([APELL_WBTC_M_ADDRESS,APELL_WETH_M_ADDRESS]);
        await CONTROL.connect(borrower).enterMarkets([WBTC_M_ADDRESS,WETH_M_ADDRESS]);

        await WETH.connect(borrower).approve(A_WETH_M,10000000000000000000);
        await A_WETH_M.connect(borrower).mint(ethers.parseUnits("10", 18));
        await A_BTC_M.connect(borrower).borrow(36341233);
        checkBalance(WBTC,mockAddress,"解出来的WBTC：");

        await WBTC.connect(borrower).approve(WBTC_MARKET_ADDRESS,10000000000000);
        await checkSupply(WBTC_M,"初始供应：");
        await WBTC_M.connect(borrower).mint(36341233);
        await checkSupply(WBTC_M,"mint供应：");
        await checkBalance(WETH,WETH_MARKET_ADDRESS,"现有的数量：");
        await WETH_M.connect(borrower).borrow("29387094995625137706");
        await checkBalance(WETH,mockAddress,"我的钱包现有WETH");*/

    });
});

/** @type import('hardhat/config').HardhatUserConfig */
require("@nomicfoundation/hardhat-ethers");

module.exports = {
  solidity: "0.8.4",

  networks: {
    hardhat: {
      forking: {
        url: "https://rpc.ankr.com/bsc/da4029e31ac0ca4a936f41646a47f1471cf4ab391c0ac92e415af4233ff3c7b6"
      }
    }
  }
};

